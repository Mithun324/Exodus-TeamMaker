@model List<TeamMaker_WebApp.Models.Team>

@{
    int actualTeamCount = Model.Count(t => t.Players.Any()); // Count teams that have players
}

<style>
    .shadow-green {
        box-shadow: 0 0 15px rgba(40, 167, 69, 0.8) !important;
        border: 2px solid #28a745 !important;
    }

    .shadow-red {
        box-shadow: 0 0 15px rgba(220, 53, 69, 0.8) !important;
        border: 2px solid #dc3545 !important;
    }

    .no-teams {
        font-size: 1.4rem;
        font-weight: bold;
        color: #dc3545;
        text-align: center;
        margin-top: 20px;
    }

    .make-teams-btn {
        display: block;
        margin: 20px auto;
        padding: 12px 20px;
        font-size: 1.2rem;
        font-weight: bold;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        text-align: center;
        text-decoration: none;
        transition: 0.3s;
    }

        .make-teams-btn:hover {
            background-color: #0056b3;
        }
</style>

<div class="container mt-3">
    <h2 class="text-center mb-3">Generated Teams</h2>

    @if (actualTeamCount == 0)
    {
        <p class="no-teams">No teams made yet.</p>
        <a href="@Url.Action("Index", "Home")" class="make-teams-btn">Click here to make teams</a>
    }
    else
    {
        <div id="teamsContainer" class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-3">
            @{
                int teamIndex = 0;
                foreach (var team in Model.Where(t => t.Players.Any()))
                {
                    <div class="col">
                        <div class="card p-3 mb-3 team-card" id="team@(teamIndex+1)Card">
                            <div class="card-body">
                                <h4 class="card-title text-center">Team @(teamIndex + 1)</h4>
                                <ul class="list-group list-group-flush team-list">
                                    @foreach (var player in team.Players)
                                    {
                                        <li class="list-group-item">@player.PlayerName - @player.Position (#@player.Number)</li>
                                    }
                                </ul>
                            </div>
                        </div>
                    </div>
                    teamIndex++;
                }
            }
        </div>

        <div class="text-center mt-3">
            <button id="shuffleTeamsBtn" class="btn btn-primary">Shuffle Teams</button>
        </div>
    }
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function () {
        function assignRandomColors() {
            let teamCards = $(".team-card");
            let teamCount = teamCards.length;
            let greenCount = Math.floor(teamCount / 2);
            let redCount = teamCount - greenCount;
            let colors = Array(greenCount).fill("shadow-green").concat(Array(redCount).fill("shadow-red"));
            colors = colors.sort(() => Math.random() - 0.5); // Shuffle colors

            teamCards.each(function (index) {
                $(this).removeClass("shadow-green shadow-red").addClass(colors[index]);
            });
        }

        $("#shuffleTeamsBtn").click(function () {
            let teams = $(".team-list");
            let players = [];

            // Collect all players from teams
            teams.each(function () {
                $(this).find("li").each(function () {
                    players.push($(this).text());
                });
            });

            // Shuffle players randomly
            players = players.sort(() => Math.random() - 0.5);

            // Redistribute players into teams
            let index = 0;
            teams.each(function () {
                $(this).empty(); // Clear current team
                for (let i = 0; i < Math.ceil(players.length / teams.length); i++) {
                    if (index < players.length) {
                        $(this).append("<li class='list-group-item'>" + players[index] + "</li>");
                        index++;
                    }
                }
            });

            // Reassign random colors
            assignRandomColors();
        });

        // Initial color assignment on page load
        assignRandomColors();
    });
</script>
